// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: oma/v1/service.proto

package omav1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OAMServiceClient is the client API for OAMService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OAMServiceClient interface {
	// Returns information about a single `Organization`.
	//
	// If the organization is not accessible by the authenticated principal or
	// does not exist, an empty `Organization` message is returned within the
	// `OrganizationGetResponse` message's `organization` field and the
	// `status` field will contain a 404 code.
	OrganizationGet(ctx context.Context, in *OrganizationGetRequest, opts ...grpc.CallOption) (*OrganizationGetResponse, error)
	// Returns information about `Organizations` in the authenticated
	// principal's `any.cloud` `Account` that the principal has access to.
	OrganizationList(ctx context.Context, in *OrganizationListRequest, opts ...grpc.CallOption) (OAMService_OrganizationListClient, error)
	// Creates a new `Organization`
	OrganizationCreate(ctx context.Context, in *OrganizationCreateRequest, opts ...grpc.CallOption) (*OrganizationCreateResponse, error)
	// Deletes an `Organization`
	OrganizationDelete(ctx context.Context, in *OrganizationDeleteRequest, opts ...grpc.CallOption) (*OrganizationDeleteResponse, error)
}

type oAMServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOAMServiceClient(cc grpc.ClientConnInterface) OAMServiceClient {
	return &oAMServiceClient{cc}
}

func (c *oAMServiceClient) OrganizationGet(ctx context.Context, in *OrganizationGetRequest, opts ...grpc.CallOption) (*OrganizationGetResponse, error) {
	out := new(OrganizationGetResponse)
	err := c.cc.Invoke(ctx, "/oma.v1.OAMService/OrganizationGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAMServiceClient) OrganizationList(ctx context.Context, in *OrganizationListRequest, opts ...grpc.CallOption) (OAMService_OrganizationListClient, error) {
	stream, err := c.cc.NewStream(ctx, &OAMService_ServiceDesc.Streams[0], "/oma.v1.OAMService/OrganizationList", opts...)
	if err != nil {
		return nil, err
	}
	x := &oAMServiceOrganizationListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OAMService_OrganizationListClient interface {
	Recv() (*OrganizationListResponse, error)
	grpc.ClientStream
}

type oAMServiceOrganizationListClient struct {
	grpc.ClientStream
}

func (x *oAMServiceOrganizationListClient) Recv() (*OrganizationListResponse, error) {
	m := new(OrganizationListResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *oAMServiceClient) OrganizationCreate(ctx context.Context, in *OrganizationCreateRequest, opts ...grpc.CallOption) (*OrganizationCreateResponse, error) {
	out := new(OrganizationCreateResponse)
	err := c.cc.Invoke(ctx, "/oma.v1.OAMService/OrganizationCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oAMServiceClient) OrganizationDelete(ctx context.Context, in *OrganizationDeleteRequest, opts ...grpc.CallOption) (*OrganizationDeleteResponse, error) {
	out := new(OrganizationDeleteResponse)
	err := c.cc.Invoke(ctx, "/oma.v1.OAMService/OrganizationDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OAMServiceServer is the server API for OAMService service.
// All implementations must embed UnimplementedOAMServiceServer
// for forward compatibility
type OAMServiceServer interface {
	// Returns information about a single `Organization`.
	//
	// If the organization is not accessible by the authenticated principal or
	// does not exist, an empty `Organization` message is returned within the
	// `OrganizationGetResponse` message's `organization` field and the
	// `status` field will contain a 404 code.
	OrganizationGet(context.Context, *OrganizationGetRequest) (*OrganizationGetResponse, error)
	// Returns information about `Organizations` in the authenticated
	// principal's `any.cloud` `Account` that the principal has access to.
	OrganizationList(*OrganizationListRequest, OAMService_OrganizationListServer) error
	// Creates a new `Organization`
	OrganizationCreate(context.Context, *OrganizationCreateRequest) (*OrganizationCreateResponse, error)
	// Deletes an `Organization`
	OrganizationDelete(context.Context, *OrganizationDeleteRequest) (*OrganizationDeleteResponse, error)
	mustEmbedUnimplementedOAMServiceServer()
}

// UnimplementedOAMServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOAMServiceServer struct {
}

func (UnimplementedOAMServiceServer) OrganizationGet(context.Context, *OrganizationGetRequest) (*OrganizationGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrganizationGet not implemented")
}
func (UnimplementedOAMServiceServer) OrganizationList(*OrganizationListRequest, OAMService_OrganizationListServer) error {
	return status.Errorf(codes.Unimplemented, "method OrganizationList not implemented")
}
func (UnimplementedOAMServiceServer) OrganizationCreate(context.Context, *OrganizationCreateRequest) (*OrganizationCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrganizationCreate not implemented")
}
func (UnimplementedOAMServiceServer) OrganizationDelete(context.Context, *OrganizationDeleteRequest) (*OrganizationDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrganizationDelete not implemented")
}
func (UnimplementedOAMServiceServer) mustEmbedUnimplementedOAMServiceServer() {}

// UnsafeOAMServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OAMServiceServer will
// result in compilation errors.
type UnsafeOAMServiceServer interface {
	mustEmbedUnimplementedOAMServiceServer()
}

func RegisterOAMServiceServer(s grpc.ServiceRegistrar, srv OAMServiceServer) {
	s.RegisterService(&OAMService_ServiceDesc, srv)
}

func _OAMService_OrganizationGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAMServiceServer).OrganizationGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oma.v1.OAMService/OrganizationGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAMServiceServer).OrganizationGet(ctx, req.(*OrganizationGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAMService_OrganizationList_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OrganizationListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OAMServiceServer).OrganizationList(m, &oAMServiceOrganizationListServer{stream})
}

type OAMService_OrganizationListServer interface {
	Send(*OrganizationListResponse) error
	grpc.ServerStream
}

type oAMServiceOrganizationListServer struct {
	grpc.ServerStream
}

func (x *oAMServiceOrganizationListServer) Send(m *OrganizationListResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _OAMService_OrganizationCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAMServiceServer).OrganizationCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oma.v1.OAMService/OrganizationCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAMServiceServer).OrganizationCreate(ctx, req.(*OrganizationCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OAMService_OrganizationDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrganizationDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OAMServiceServer).OrganizationDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oma.v1.OAMService/OrganizationDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OAMServiceServer).OrganizationDelete(ctx, req.(*OrganizationDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OAMService_ServiceDesc is the grpc.ServiceDesc for OAMService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OAMService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "oma.v1.OAMService",
	HandlerType: (*OAMServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OrganizationGet",
			Handler:    _OAMService_OrganizationGet_Handler,
		},
		{
			MethodName: "OrganizationCreate",
			Handler:    _OAMService_OrganizationCreate_Handler,
		},
		{
			MethodName: "OrganizationDelete",
			Handler:    _OAMService_OrganizationDelete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "OrganizationList",
			Handler:       _OAMService_OrganizationList_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "oma/v1/service.proto",
}
